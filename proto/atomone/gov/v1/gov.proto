// Since: cosmos-sdk 0.46
syntax = "proto3";
package atomone.gov.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/atomone-hub/atomone/x/gov/types/v1";

// VoteOption enumerates the valid vote options for a given governance proposal.
enum VoteOption {
  // VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  VOTE_OPTION_UNSPECIFIED = 0;
  // VOTE_OPTION_YES defines a yes vote option.
  VOTE_OPTION_YES = 1;
  // VOTE_OPTION_ABSTAIN defines an abstain vote option.
  VOTE_OPTION_ABSTAIN = 2;
  // VOTE_OPTION_NO defines a no vote option.
  VOTE_OPTION_NO = 3;
  // VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  VOTE_OPTION_NO_WITH_VETO = 4;
}

// WeightedVoteOption defines a unit of vote for vote split.
message WeightedVoteOption {
  // option defines the valid vote options, it must not contain duplicate vote options.
  VoteOption option = 1;

  // weight is the vote weight associated with the vote option.
  string     weight = 2 [(cosmos_proto.scalar) = "cosmos.Dec"];
}

// Deposit defines an amount deposited by an account address to an active
// proposal.
message Deposit {
  // proposal_id defines the unique id of the proposal.
  uint64   proposal_id                     = 1;
  
  // depositor defines the deposit addresses from the proposals.
  string   depositor                       = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // amount to be deposited by depositor.
  repeated cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// Proposal defines the core field members of a governance proposal.
message Proposal {
  // id defines the unique id of the proposal.
  uint64   id                           = 1;

  // messages are the arbitrary messages to be executed if the proposal passes.
  repeated google.protobuf.Any messages = 2;

  // status defines the proposal status.
  ProposalStatus               status   = 3;

  // final_tally_result is the final tally result of the proposal. When
  // querying a proposal via gRPC, this field is not populated until the
  // proposal's voting period has ended.
  TallyResult               final_tally_result        = 4;
  
  // submit_time is the time of proposal submission.
  google.protobuf.Timestamp submit_time               = 5 [(gogoproto.stdtime) = true];
  
  // deposit_end_time is the end time for deposition.
  google.protobuf.Timestamp deposit_end_time          = 6 [(gogoproto.stdtime) = true];
 
  // total_deposit is the total deposit on the proposal.
  repeated cosmos.base.v1beta1.Coin total_deposit     = 7 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  
  // voting_start_time is the starting time to vote on a proposal.
  google.protobuf.Timestamp         voting_start_time = 8 [(gogoproto.stdtime) = true];
 
  // voting_end_time is the end time of voting on a proposal.
  google.protobuf.Timestamp         voting_end_time   = 9 [(gogoproto.stdtime) = true];

  // metadata is any arbitrary metadata attached to the proposal.
  string metadata = 10;

  // title is the title of the proposal
  //
  // Since: cosmos-sdk 0.47
  string title = 11;

  // summary is a short summary of the proposal
  //
  // Since: cosmos-sdk 0.47
  string summary = 12;

  // Proposer is the address of the proposal sumbitter
  //
  // Since: cosmos-sdk 0.47
  string proposer = 13 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// ProposalStatus enumerates the valid statuses of a proposal.
enum ProposalStatus {
  // PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
  PROPOSAL_STATUS_UNSPECIFIED = 0;
  // PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
  // period.
  PROPOSAL_STATUS_DEPOSIT_PERIOD = 1;
  // PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
  // period.
  PROPOSAL_STATUS_VOTING_PERIOD = 2;
  // PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
  // passed.
  PROPOSAL_STATUS_PASSED = 3;
  // PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
  // been rejected.
  PROPOSAL_STATUS_REJECTED = 4;
  // PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
  // failed.
  PROPOSAL_STATUS_FAILED = 5;
}

// TallyResult defines a standard tally for a governance proposal.
message TallyResult {
  // yes_count is the number of yes votes on a proposal.
  string yes_count          = 1 [(cosmos_proto.scalar) = "cosmos.Int"];
  // abstain_count is the number of abstain votes on a proposal.
  string abstain_count      = 2 [(cosmos_proto.scalar) = "cosmos.Int"];
  // no_count is the number of no votes on a proposal.
  string no_count           = 3 [(cosmos_proto.scalar) = "cosmos.Int"];
  // no_with_veto_count is the number of no with veto votes on a proposal.
  string no_with_veto_count = 4 [(cosmos_proto.scalar) = "cosmos.Int"];
}

// Vote defines a vote on a governance proposal.
// A Vote consists of a proposal ID, the voter, and the vote option.
message Vote {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // voter is the voter address of the proposal.
  string voter       = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  reserved 3;

  // options is the weighted vote options.
  repeated WeightedVoteOption options = 4;

  // metadata is any  arbitrary metadata to attached to the vote.
  string metadata = 5;
}

// DepositParams defines the params for deposits on governance proposals.
message DepositParams {
  // Minimum deposit for a proposal to enter voting period.
  repeated cosmos.base.v1beta1.Coin min_deposit = 1
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "min_deposit,omitempty"];

  // Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  // months.
  google.protobuf.Duration max_deposit_period = 2
      [(gogoproto.stdduration) = true, (gogoproto.jsontag) = "max_deposit_period,omitempty"];
}

// VotingParams defines the params for voting on governance proposals.
message VotingParams {
  // Duration of the voting period.
  google.protobuf.Duration voting_period = 1 [(gogoproto.stdduration) = true];
}

// TallyParams defines the params for tallying votes on governance proposals.
message TallyParams {
  // Minimum percentage of total stake needed to vote for a result to be
  // considered valid.
  string quorum = 1 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
  string threshold = 2 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // Minimum value of Veto votes to Total votes ratio for proposal to be
  // vetoed. Default value: 1/3.
  string veto_threshold = 3 [(cosmos_proto.scalar) = "cosmos.Dec"];
}

// Params defines the parameters for the x/gov module.
//
// Since: cosmos-sdk 0.47
message Params {
  // Minimum deposit for a proposal to enter voting period.
  repeated cosmos.base.v1beta1.Coin min_deposit = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  // months.
  google.protobuf.Duration max_deposit_period = 2 [(gogoproto.stdduration) = true];

  // Duration of the voting period.
  google.protobuf.Duration voting_period = 3 [(gogoproto.stdduration) = true];

  //  Minimum percentage of total stake needed to vote for a result to be
  //  considered valid.
  string quorum = 4 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
  string threshold = 5 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  Minimum value of Veto votes to Total votes ratio for proposal to be
  //  vetoed. Default value: 1/3.
  string veto_threshold = 6 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
  string min_initial_deposit_ratio = 7 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // burn deposits if a proposal does not meet quorum
  bool burn_vote_quorum = 13;

  // burn deposits if the proposal does not enter voting period
  bool burn_proposal_deposit_prevote = 14;
  
  // burn deposits if quorum with vote type no_veto is met
  bool burn_vote_veto = 15;

  // defines the maximum number of governors that can be active at any given time.
  uint64 max_governors = 20;
}


// Governor defines a governor, together with the total amount of delegated
// validator's bond shares for a set amount of validators. When a delegator
// delegates a percentage of its x/gov power to a governor, the resulting
// shares from each delegators delegations in x/staking are added to the
// governor's total shares.
message Governor {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // governor_address defines the address of the governor; bech encoded in JSON.
  string governor_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // status is the status of the governor (active/inactive).
  GovernorStatus status = 2;
  // description defines the description terms for the governor.
  GovernorDescription description = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// GovernorStatus is the status of a governor.
enum GovernorStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED defines an invalid governor status.
  GOVERNOR_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];
  // ACTIVE defines a governor that is active.
  GOVERNOR_STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "Active"];
  // INACTIVE defines a governor that is inactive.
  GOVERNOR_STATUS_INACTIVE = 2 [(gogoproto.enumvalue_customname) = "Inactive"];
}

// Description defines a governor description.
message GovernorDescription {
  option (gogoproto.equal) = true;

  // moniker defines a human-readable name for the governor.
  string moniker = 1;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2;
  // website defines an optional website link.
  string website = 3;
  // security_contact defines an optional email for security contact.
  string security_contact = 4;
  // details define other optional details.
  string details = 5;
}

// GovernorValShares holds the number of shares from the specific validator
// that a governor can use to vote on proposals.
message GovernorValShares {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string governor_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  // shares define the delegation shares available from this validator.
  string shares = 3 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];
}

// GovernanceDelegation defines a delegation of governance voting power from a
// delegator to a governor.
message GovernanceDelegation {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string governor_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // percentage is the percentage of the delegator's bonded tokens that are delegated to the governor.
  string percentage = 3 [(cosmos_proto.scalar) = "cosmos.Dec"];
}
